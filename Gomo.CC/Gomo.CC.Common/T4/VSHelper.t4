<#@ assembly name="EnvDte" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>



<#+ 
public class VShelper
{
	/// <summary>
	/// Stores a reference to the Host of the t4 template
	/// </summary>
	public ITextTemplatingEngineHost Host { get; private set; }
	public VShelper(object host)
	{
		this.Host = host as ITextTemplatingEngineHost;
	}
	private EnvDTE.DTE _DTE = null;
	/// <summary>
	/// Returns a reference to the primary management object of Visual Studio
	/// <summary>
	public EnvDTE.DTE DTE
	{
		get
		{
			if (_DTE == null)
            {
				var hostServiceProvider = this.Host as IServiceProvider;
				if (hostServiceProvider != null)
					_DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            }
			return _DTE;
		}
	}
	//------------------------------------------------------------------------------------
	public IEnumerable<EnvDTE.Project> GetAllProjectsRecursiveFromSolution(EnvDTE.DTE dte)
    {
        List<EnvDTE.Project> projectList = new List<EnvDTE.Project>();
        var folders = dte.Solution.Projects.Cast<EnvDTE.Project>().Where(p => p.Kind == EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder);
 
        foreach (EnvDTE.Project folder in folders)
        {
            foreach (EnvDTE.ProjectItem item in folder.ProjectItems)
            {
                if(item.Object == null)
                {
                    continue;
                }
                if((item.Object as EnvDTE.Project).Kind ==  EnvDTE.Constants.vsProjectKindSolutionItems )
                {
                    projectList.AddRange(GetAllProjectsRecursive(item.Object as EnvDTE.Project));
                }
                else if (item.Object is EnvDTE.Project)
                {
                    projectList.Add(item.Object as EnvDTE.Project);
                }
            }
        }
        var projects = dte.Solution.Projects.Cast<EnvDTE.Project>().Where(p => p.Kind != EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder);
        projectList.AddRange(projects);
 
        return projectList;
    }
    public IEnumerable<Project> GetAllProjectsRecursive(EnvDTE.Project folder)
    {
        List<EnvDTE.Project> projectList = new List<EnvDTE.Project>();
 
        if (folder.ProjectItems != null)
        {
            foreach (EnvDTE.ProjectItem item in folder.ProjectItems)
            {
                if(item.Object == null)
                {
                    continue;
                }
                if((item.Object as EnvDTE.Project).Kind ==  EnvDTE.Constants.vsProjectKindSolutionItems )
                {
                    projectList.AddRange(GetAllProjectsRecursive(item.Object as EnvDTE.Project));
                }
                else if (item.Object is EnvDTE.Project)
                {
                    projectList.Add(item.Object as EnvDTE.Project);
                }
            }
        }
        return projectList;
    }
	//------------------------------------------------------------------------------------
	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<EnvDTE.ProjectItem>();
		
		if (items == null) return ret;
		
		foreach(EnvDTE.ProjectItem item in items)
		{
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}
		
		return ret;
	}

	public string GetListedType(EnvDTE.CodeProperty property)
    {
		return property.Type.AsFullName.Replace("System.Collections.Generic.List<", "").Replace(">","");
    }

	public EnvDTE.Project GetProjectContainingFile(string filename)
    {
		var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
		return visualStudio.Solution.FindProjectItem(filename).ContainingProject as EnvDTE.Project;
	}

	public List<EnvDTE.CodeClass> GetClassesOf(EnvDTE.Project project)
	{
		var items = GetProjectItemsRecursively(project.ProjectItems);

		var classes = new List<EnvDTE.CodeClass>();

		foreach(var item in items)
        {
			if(item.FileCodeModel != null)
            {
				foreach (EnvDTE.CodeElement element in item.FileCodeModel.CodeElements)
				{
					if (element is EnvDTE.CodeNamespace)
					{
						EnvDTE.CodeNamespace ns = (EnvDTE.CodeNamespace)element;
					
						foreach (EnvDTE.CodeElement elem in ns.Members)
						{
							if (elem is EnvDTE.CodeClass)
							{
								classes.Add(elem as EnvDTE.CodeClass);
							}
						}
					}
				}
            }
        }

		return classes;
	}

	public List<EnvDTE.CodeProperty> FindProperties(EnvDTE.CodeElements elements)
    {
        List<EnvDTE.CodeProperty> properties = new List<EnvDTE.CodeProperty>();
        
        foreach (EnvDTE.CodeElement element in elements)
        {
            EnvDTE.CodeProperty p = element as EnvDTE.CodeProperty;
        
            if (p != null)
                properties.Add(p);            
        }
    
        return properties;
    }
}

	
#>