<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Assembly Name="EnvDTE80" #>
<#@ Assembly Name="Microsoft.Build" #>
<#@ Assembly Name="Microsoft.CSharp" #>
<#@ Assembly Name="System.Xml.Linq" #>
<#@ Assembly Name="VSLangProj110" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics.Contracts" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="VSLangProj110" #>
<#@ include file="..\Gomo.CC.Common\T4\VSHelper.t4" #>
<#@ output extension=".cs" #>

<#
	string strnamespace="Gomo.CC.EFDAL";
    //主模型的專案名稱
	string modelprjname="Gomo.CC.Model";
	string strdbcontext="GomoCCDBContext";
    VShelper vshelper = new VShelper(this.Host);
	IEnumerable<EnvDTE.Project> lstprj=vshelper.GetAllProjectsRecursiveFromSolution(vshelper.DTE);
	EnvDTE.Project modelprj=null;
	foreach (var item in lstprj)
    {
		if(item.Name.Contains(modelprjname))
        {
			modelprj=item;
		    //WriteLine(item.Name);
        }
    }
     //class 的頭文件
	WriteLine(GomoClassHelper.Head(strnamespace));
	List<EnvDTE.CodeClass> listclass=vshelper.GetClassesOf(modelprj);
    foreach(var cls in listclass)
    {
        if(cls.Name.Contains("Context")==true) continue;
        string strdal=cls.Name.ToLower()+"dal";
				//WriteLine("class : " + cls.Name);
                StringBuilder sb= new StringBuilder();
				sb.Append("	public partial class ");
				sb.Append(cls.Name+"Dal:");
				sb.Append("BaseDal<"+cls.Name+">,");
				sb.AppendLine("I"+cls.Name+"Dal");
				sb.AppendLine("	{");
				sb.AppendLine("		public "+cls.Name+"Dal("+strdbcontext+" context)");
				sb.AppendLine("			:base(context)");
				sb.AppendLine("		{");
				sb.AppendLine("		}");
				sb.AppendLine("	}");
				WriteLine(sb.ToString());
    }
    //write foot
	WriteLine(GomoClassHelper.foot());
#>

<#+
public static class GomoClassHelper
{
	public static string Head(string _namspace)
    {
		StringBuilder sb= new StringBuilder();
		sb.AppendLine("using Gomo.CC.EFDal;");
		sb.AppendLine("using Gomo.CC.IDAL;");
		sb.AppendLine("using Gomo.CC.Model;");
		//sb.AppendLine("namespace Gomo.CC.IBLL");
		sb.AppendLine("namespace "+_namspace);
		sb.AppendLine("{");
		return sb.ToString();
    }
	public static string foot()
    {
		StringBuilder sb= new StringBuilder();
		sb.AppendLine("}");
		return sb.ToString();
    }
}
#>

